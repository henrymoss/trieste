:mod:`trieste.models`
=====================

.. py:module:: trieste.models

.. autoapi-nested-parse::

   This package contains the primary interface for trainable probabilistic models,
   :class:`ModelInterface`, as well as a number of implementations of :class:`ModelInterface` that wrap
   GPflow models, and tooling for creating :class:`ModelInterface`\ s from config.



Package Contents
----------------

.. py:class:: ModelConfig

   Specification for building a :class:`~trieste.models.ModelInterface`. 

   .. attribute:: model
      :annotation: :Union[tf.Module, ModelInterface]

      The :class:`~trieste.models.ModelInterface`, or the model to wrap in one. 


   .. attribute:: optimizer
      :annotation: :Optimizer

      The optimizer with which to train the model (by minimizing its loss function). 


   .. attribute:: optimizer_args
      :annotation: :Dict[str, Any]

      The keyword arguments to pass to the optimizer when training the model. 


   .. method:: create_from_dict(d: Dict[str, Any]) -> ModelConfig
      :staticmethod:

      :param d: A dictionary from which to construct this :class:`ModelConfig`.
      :return: A :class:`ModelConfig` built from ``d``.
      :raise TypeError: If the keys in ``d`` do not correspond to the parameters of
          :class:`ModelConfig`.


   .. method:: create_model_interface(self) -> ModelInterface

      :return: A model built from this model configuration.



.. data:: ModelSpec
   

   Type alias for any type that can be used to fully specify a model. 


.. function:: create_model_interface(config: ModelSpec) -> ModelInterface

   :param config: A :class:`ModelInterface` or configuration of a model.
   :return: A :class:`~trieste.models.ModelInterface` build according to ``config``.


.. py:class:: ModelInterface

   Bases: :class:`abc.ABC`

   A trainable probabilistic model. 

   .. method:: update(self, dataset: Dataset) -> None
      :abstractmethod:

      Update the model given the specified ``dataset``. Does not train the model.

      :param dataset: The data with which to update the model.


   .. method:: predict(self, query_points: QueryPoints) -> Tuple[ObserverEvaluations, TensorType]
      :abstractmethod:

      Return the predicted mean and variance of the latent function(s) at the specified
      ``query_points``, conditioned on the current data (see :meth:`update` to update the model
      given new data).

      :param query_points: The points at which to make predictions.
      :return: The predicted mean and variance.


   .. method:: sample(self, query_points: QueryPoints, num_samples: int) -> ObserverEvaluations
      :abstractmethod:

      Return ``num_samples`` samples from the predictive distribution at ``query_points``.

      :param query_points: The points at which to sample.
      :param num_samples: The number of samples at each point.
      :return: The samples. Has shape [S, Q, D], where S is the number of samples, Q is the number
          of query points, and D is the dimension of the predictive distribution.


   .. method:: optimize(self) -> None
      :abstractmethod:

      Optimize the model parameters. 



.. py:class:: TrainableModelInterface(name=None)

   Bases: :class:`tensorflow.Module`, :class:`trieste.models.model_interfaces.ModelInterface`, :class:`abc.ABC`

   A utility class that provides a default optimization strategy, as well as the ability to modify
   various elements of this strategy.

   :cvar maxiter_default: The default maximum number of iterations to optimize the model for, when
       using a :class:`tf.optimizers.Optimizer`.
   :cvar create_optimizer_default: Builder for the default optimizer.
   :cvar apply_jit_function: If `True`, the default optimization procedure is compiled
       with :func:`tf.function`.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: loss(self) -> tf.Tensor
      :abstractmethod:

      The training loss (to be minimized) on this model. 


   .. method:: optimizer(self) -> Optimizer
      :property:

      The optimizer used to minimize the training loss. 


   .. method:: set_optimizer(self, optimizer: Optimizer) -> None

      :param optimizer: The optimizer to use.


   .. method:: optimizer_args(self) -> Dict[str, Any]
      :property:

      Keyword arguments passed to the optimizer during optimization. 


   .. method:: set_optimizer_args(self, args: Dict[str, Any]) -> None

      :param args: The keyword arguments to use.


   .. method:: optimize(self) -> None

      Optimize the model parameters. 


   .. method:: set_optimize(self, optimize_fn: Optional[Callable[[], None]] = None) -> None

      :param optimize_fn: The function to call on `optimize`. By default, constructs an
      optimization procedure from the current `loss`, `optimizer` and `optimizer_args`.



.. py:class:: GPflowPredictor

   Bases: :class:`trieste.models.model_interfaces.ModelInterface`, :class:`abc.ABC`

   A trainable wrapper for a GPflow Gaussian process model. 

   .. method:: model(self) -> GPModel
      :property:

      The underlying GPflow model. 


   .. method:: predict(self, query_points: QueryPoints) -> Tuple[ObserverEvaluations, TensorType]

      Return the predicted mean and variance of the latent function(s) at the specified
      ``query_points``, conditioned on the current data (see :meth:`update` to update the model
      given new data).

      :param query_points: The points at which to make predictions.
      :return: The predicted mean and variance.


   .. method:: sample(self, query_points: QueryPoints, num_samples: int) -> ObserverEvaluations

      Return ``num_samples`` samples from the predictive distribution at ``query_points``.

      :param query_points: The points at which to sample.
      :param num_samples: The number of samples at each point.
      :return: The samples. Has shape [S, Q, D], where S is the number of samples, Q is the number
          of query points, and D is the dimension of the predictive distribution.



.. py:class:: GaussianProcessRegression(model: Union[GPR, SGPR])

   Bases: :class:`trieste.models.model_interfaces.GPflowPredictor`, :class:`trieste.models.model_interfaces.TrainableModelInterface`

   A trainable wrapper for a GPflow Gaussian process model. 

   :param model: The GPflow model to wrap.

   .. method:: model(self) -> Union[GPR, SGPR]
      :property:

      The underlying GPflow model. 


   .. method:: loss(self) -> tf.Tensor

      The training loss (to be minimized) on this model. 


   .. method:: update(self, dataset: Dataset) -> None

      Update the model given the specified ``dataset``. Does not train the model.

      :param dataset: The data with which to update the model.



.. data:: Batcher
   

   Type alias for a function that creates minibatches from a :class:`~trieste.datasets.Dataset`.


.. py:class:: SparseVariational(model: SVGP, data: Dataset, optimizer: tf.optimizers.Optimizer, iterations: int, batcher: Batcher = lambda ds: [(ds.query_points, ds.observations)], apply_jit: bool = False)

   Bases: :class:`trieste.models.model_interfaces.GPflowPredictor`, :class:`abc.ABC`

   A trainable wrapper for a GPflow Gaussian process model. 

   :param model: The underlying GPflow sparse variational model.
   :param data: The initial training data.
   :param iterations: The number of iterations for which to optimize the model.
   :param optimizer: The optimizer to use for optimization.
   :param batcher: A function to convert training data into (mini)batches for optimization.

   .. method:: model(self) -> SVGP
      :property:

      The underlying GPflow model. 


   .. method:: update(self, dataset: Dataset) -> None

      Update the model given the specified ``dataset``. Does not train the model.

      :param dataset: The data with which to update the model.


   .. method:: optimize(self) -> None

      Optimize the model in batches defined by the ``batcher`` argument to :meth:`__init__`.



.. py:class:: VariationalGaussianProcess(model: Union[GPR, SGPR])

   Bases: :class:`trieste.models.model_interfaces.GaussianProcessRegression`

   A trainable wrapper for a GPflow Gaussian process model. 

   :param model: The GPflow model to wrap.

   .. method:: update(self, dataset: Dataset)

      Update the model given the specified ``dataset``. Does not train the model.

      :param dataset: The data with which to update the model.


   .. method:: predict(self, query_points: QueryPoints) -> Tuple[ObserverEvaluations, TensorType]

      Return the predicted mean and variance of the latent function(s) at the specified
      ``query_points``, conditioned on the current data (see :meth:`update` to update the model
      given new data).

      :param query_points: The points at which to make predictions.
      :return: The predicted mean and variance.



.. data:: supported_models
   :annotation: :Dict[Any, Callable[[Any], TrainableModelInterface]]

   :var supported_models: A mapping of third-party model types to :class:`ModelInterface` classes
   that wrap models of those types.


